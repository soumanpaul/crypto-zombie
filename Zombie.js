

var abi = "by evm"
var zombieFactoryContract = web3.eth.contract(abi)
var contratAddress = "contract address in ethereum bolockchain"
var ZombieFactory = zombieFactoryContract(contratAddress)

// take new input
$("#ourButton").click(function(e) {
    var name = $("#nameInput").val()
    ZombieFactory.createRandomZombie(name)
})

// listen for the NewZombie event and update the UI
var event = ZombieFactory.NewZombie(function(error, result) {
    if(error) return
    generateZombie(result.zombieId, result.name, result.dna)
})


// take the Zombie dna, and update out image
function generateZombie(id, name, dna) {
    let dnaStr = String(dna)
    // pad DNA with leading zeros if it's less than 16 chars
    while(dnaStr.length < 16)
        dnaStr = "0" + dnaStr;

    let ZombieDetails = {
    // first 2 digits make up the head. We have 7 possible heads, so % 7
    // to get a number 0 - 6, then add 1 to make it 1 - 7. Then we have 7
    // image files named "head1.png" through "head7.png" we load based on
    // this number:
    headChoice: dnaStr.substring(0,2)%7 +1,
    eyeChoice: dnaStr.substring(2,4)%11+1,
    shirtChoice: dnaStr.substring(4,6)%11+1,
    skinColorChoice: parseInt(dnaStr.substring(6,8)/100*360),
    clothesColorChoice: parseInt(dnaStr.substring(10,12)/100*360),
    zombieName: name,
    zombieDescription: "A Level 1 CryptoZombie"
    }    
    return ZombieDetails;
}


// A function that takes a name, uses it to generate a random zombie, and adds that zombie to our app's zombie
//  database on the blockchain.


// Lesson 2 one

var abi = /* abi generated by the compiler */
var ZombieFeedingContract = web3.eth.contract(abi)
var contractAddress = /* our contract address on Ethereum after deploying */
var ZombieFeeding = ZombieFeedingContract.at(contractAddress)

// Assuming we have our zombie's ID and the kitty ID we want to attack
let zombieId = 1;
let kittyId = 1;

// To get the CryptoKitty's image, we need to query their web API. This
// information isn't stored on the blockchain, just their webserver.
// If everything was stored on a blockchain, we wouldn't have to worry
// about the server going down, them changing their API, or the company
// blocking us from loading their assets if they don't like our zombie game ;)
let apiUrl = "https://api.cryptokitties.co/kitties/" + kittyId
$.get(apiUrl, function(data) {
  let imgUrl = data.image_url
  // do something to display the image
})

// When the user clicks on a kitty:
$(".kittyImage").click(function(e) {
  // Call our contract's `feedOnKitty` method
  ZombieFeeding.feedOnKitty(zombieId, kittyId)
})

// Listen for a NewZombie event from our contract so we can display it:
ZombieFactory.NewZombie(function(error, result) {
  if (error) return
  // This function will display the zombie, like in lesson 1:
  generateZombie(result.zombieId, result.name, result.dna)
})